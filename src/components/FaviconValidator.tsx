"use client";

import { useState } from 'react';
import { Search, Check, X, ExternalLink, RefreshCw } from 'lucide-react';
import { useFaviconValidator } from '@/hooks/useFaviconValidator';

const getFaviconPurpose = (type: string): string => {
  switch (type) {
    case '/favicon.ico':
      return 'Classic Favicon';
    case '/favicon-16x16.png':
    case '/favicon-32x32.png':
    case '/favicon-192x192.png':
    case '/favicon-512x512.png':
      return 'Modern PNG Favicon';
    case '/apple-touch-icon.png':
      return 'Apple Touch Icon';
    case '/android-chrome-192x192.png':
    case '/android-chrome-512x512.png':
      return 'Android Chrome Icon';
    case '/site.webmanifest':
      return 'Web Manifest';
    default:
      return 'Favicon';
  }
};

export default function FaviconValidator() {
  const [url, setUrl] = useState('');
  const { validationResult, loading, validateFavicons, resetValidation } = useFaviconValidator();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (url.trim()) {
      validateFavicons(url.trim());
    }
  };

  const handleReset = () => {
    setUrl('');
    resetValidation();
  };

  return (
    <div className="favicon-validator">
      <div className="favicon-validator__header">
        <h1 className="favicon-validator__title">
          <Search size={32} className="favicon-validator__icon" />
          Favicon Validator
        </h1>
        <p className="favicon-validator__subtitle">
          Check if a website has the favicons generated by our application properly installed
        </p>
      </div>

      <div className="favicon-validator__card">
        <form onSubmit={handleSubmit} className="favicon-validator__form">
          <div className="favicon-validator__input-group">
            <input
              type="url"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              placeholder="Enter website URL (e.g: google.com)"
              className="favicon-validator__input"
              disabled={loading}
            />
            <button
              type="submit"
              className="btn-primary favicon-validator__submit"
              disabled={loading || !url.trim()}
            >
              {loading ? (
                <>
                  <RefreshCw size={20} className="favicon-validator__loading" />
                  Validating...
                </>
              ) : (
                <>
                  <Search size={20} />
                  Validate
                </>
              )}
            </button>
          </div>
        </form>

        {validationResult && (
          <div className="favicon-validator__results">

            {validationResult.error && (
              <div className="favicon-validator__error">
                {validationResult.error}
              </div>
            )}

            <div className="favicon-validator__checks">
              <h3>Favicons generated by our application:</h3>
              <div className="favicon-validator__checks-grid">
                <table>
                  <tbody>
                    {validationResult.checks.map((check, index) => (
                      <tr key={index} className="favicon-validator__check">
                        <td className="favicon-validator__check-icon">
                          {check.exists ? <Check size={16} /> : <X size={16} />}
                        </td>
                        <td className="favicon-validator__check-type">{check.type}</td>
                        <td className="favicon-validator__check-purpose">
                          {getFaviconPurpose(check.type)}
                        </td>
                        <td className="favicon-validator__check-size">
                          {check.size ? `${(parseInt(check.size) / 1024).toFixed(1)} KB` : '-'}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            <div className="favicon-validator__actions">
              <button onClick={handleReset} className="btn-secondary">
                Validate another URL
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 
