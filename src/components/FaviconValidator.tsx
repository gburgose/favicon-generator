"use client";

import { useState, useEffect } from 'react';
import { Search, Check, X, RefreshCw, Trash2, CheckCircle } from 'lucide-react';
import { useFaviconValidator } from '@/hooks/useFaviconValidator';
import { useValidatorStore } from '@/stores/validatorStore';
import Swal from 'sweetalert2';
import toast from 'react-hot-toast';

export default function FaviconValidator() {
  const { lastUrl, setLastUrl, clearLastUrl } = useValidatorStore();
  const [url, setUrl] = useState(lastUrl);
  const { validationResult, loading, validateFavicons, resetValidation } = useFaviconValidator();

  // Sincronizar el input con la URL del store cuando cambie
  useEffect(() => {
    setUrl(lastUrl);
  }, [lastUrl]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (url.trim()) {
      setLastUrl(url.trim());
      validateFavicons(url.trim());
    }
  };

  const handleReset = () => {
    Swal.fire({
      title: 'Are you sure?',
      text: 'This will clear the current validation results and URL. This action cannot be undone.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#F3DFA2',
      cancelButtonColor: '#666',
      confirmButtonText: 'Yes, clear everything',
      cancelButtonText: 'Cancel',
      background: '#1e1e1e',
      color: '#EFE6DD'
    }).then((result) => {
      if (result.isConfirmed) {
        setUrl('');
        clearLastUrl();
        resetValidation();
        toast.success('Validation cleared successfully!');
      }
    });
  };

  return (
    <section className="validator">
      <div className="validator__header">
        <h1 className="validator__title">
          <CheckCircle size={32} className="validator__icon" />
          Favicon Validator
        </h1>
        <p className="validator__subtitle">
          Check if a website has the favicons generated by our application properly installed.
        </p>
      </div>

      <div className="validator__card">
        <form onSubmit={handleSubmit} className="validator__form">
          <div className="validator__input-group">
            <input
              type="url"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              placeholder="Enter website URL (e.g: google.com)"
              className="validator__input"
              disabled={loading}
            />
            <button
              type="submit"
              className="btn-primary validator__submit"
              disabled={loading || !url.trim()}
            >
              {loading ? (
                <>
                  <RefreshCw size={20} className="validator__loading" />
                  Validating...
                </>
              ) : (
                <>
                  <Search size={20} />
                  Validate
                </>
              )}
            </button>
          </div>
        </form>

        {validationResult && (
          <div className="validator__results">
            {validationResult.error && (
              <div className="validator__error">
                {validationResult.error}
              </div>
            )}

            {!validationResult.error && (
              <>
                <div className="validator__checks">
                  <h3>Favicon Coverage Analysis:</h3>
                  <p className="validator__coverage-text">
                    Found {validationResult.foundFavicons} out of {validationResult.totalFavicons} favicon sizes
                    ({Math.round((validationResult.foundFavicons / validationResult.totalFavicons) * 100)}% coverage).
                  </p>
                  <div className="validator__checks-grid">
                    <table>
                      <tbody>
                        {validationResult.validations.map((validation, index) => (
                          <tr key={index} className={`validator__check ${validation.found ? 'success' : 'error'}`}>
                            <td className="validator__check-icon">
                              {validation.found ? <Check size={16} /> : <X size={16} />}
                            </td>
                            <td className="validator__check-purpose">{validation.purpose}</td>
                            <td className="validator__check-size">
                              {validation.name.replace('-ico', '')}
                              <span className="validator__format-badge">{validation.format.toUpperCase()}</span>
                            </td>
                            <td className="validator__check-url">
                              {validation.found ? (
                                <a href={validation.foundUrl} target="_blank" rel="noopener noreferrer">
                                  View
                                </a>
                              ) : (
                                'Not found'
                              )}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>

                <div className="validator__actions">
                  <button onClick={handleReset} className="converter__btn-secondary converter__btn-secondary--no-margin">
                    <Trash2 size={18} />
                    Validate another URL
                  </button>
                </div>
              </>
            )}
          </div>
        )}
      </div>
    </section>
  );
} 
